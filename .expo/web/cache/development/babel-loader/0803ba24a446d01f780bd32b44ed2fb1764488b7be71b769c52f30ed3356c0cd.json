{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport OpenAI from 'openai';\nvar AIService = function () {\n  function AIService(apiKey) {\n    _classCallCheck(this, AIService);\n    this.openai = new OpenAI({\n      apiKey: apiKey\n    });\n  }\n  return _createClass(AIService, [{\n    key: \"transcribeAudio\",\n    value: function () {\n      var _transcribeAudio = _asyncToGenerator(function* (audioUri) {\n        try {\n          var audioBlob = yield fetch(audioUri).then(function (r) {\n            return r.blob();\n          });\n          var audioFile = new File([audioBlob], 'audio.wav', {\n            type: 'audio/wav'\n          });\n          var response = yield this.openai.audio.transcriptions.create({\n            file: audioFile,\n            model: 'whisper-1'\n          });\n          return response.text;\n        } catch (error) {\n          console.error('Transcription error:', error);\n          throw error;\n        }\n      });\n      function transcribeAudio(_x) {\n        return _transcribeAudio.apply(this, arguments);\n      }\n      return transcribeAudio;\n    }()\n  }, {\n    key: \"getAIResponse\",\n    value: function () {\n      var _getAIResponse = _asyncToGenerator(function* (conversation) {\n        try {\n          var _response$choices$0$m;\n          var response = yield this.openai.chat.completions.create({\n            model: 'gpt-4',\n            messages: [{\n              role: 'system',\n              content: 'You are a helpful English conversation partner. Keep responses concise and natural, like in a real conversation. Ask follow-up questions to keep the conversation going.'\n            }].concat(_toConsumableArray(conversation.map(function (text, index) {\n              return {\n                role: index % 2 === 0 ? 'user' : 'assistant',\n                content: text\n              };\n            }))),\n            max_tokens: 100\n          });\n          return ((_response$choices$0$m = response.choices[0].message) == null ? void 0 : _response$choices$0$m.content) || '';\n        } catch (error) {\n          console.error('AI response error:', error);\n          throw error;\n        }\n      });\n      function getAIResponse(_x2) {\n        return _getAIResponse.apply(this, arguments);\n      }\n      return getAIResponse;\n    }()\n  }, {\n    key: \"assessSpeaking\",\n    value: function () {\n      var _assessSpeaking = _asyncToGenerator(function* (transcript) {\n        try {\n          var _response$choices$0$m2;\n          var response = yield this.openai.chat.completions.create({\n            model: 'gpt-4',\n            messages: [{\n              role: 'system',\n              content: `Analyze the following English conversation transcript and provide scores (1-10) and feedback for:\n            - Fluency: How smoothly and naturally they speak\n            - Grammar: Correctness of language structure\n            - Pronunciation: Based on word choice and sentence structure\n            - Vocabulary: Range and appropriateness of words used\n            Provide the response in JSON format with scores and feedback for each category.`\n            }, {\n              role: 'user',\n              content: transcript.join('\\n')\n            }]\n          });\n          var assessment = JSON.parse(((_response$choices$0$m2 = response.choices[0].message) == null ? void 0 : _response$choices$0$m2.content) || '{}');\n          return assessment;\n        } catch (error) {\n          console.error('Assessment error:', error);\n          throw error;\n        }\n      });\n      function assessSpeaking(_x3) {\n        return _assessSpeaking.apply(this, arguments);\n      }\n      return assessSpeaking;\n    }()\n  }]);\n}();\nexport default AIService;","map":{"version":3,"names":["OpenAI","AIService","apiKey","_classCallCheck","openai","_createClass","key","value","_transcribeAudio","_asyncToGenerator","audioUri","audioBlob","fetch","then","r","blob","audioFile","File","type","response","audio","transcriptions","create","file","model","text","error","console","transcribeAudio","_x","apply","arguments","_getAIResponse","conversation","_response$choices$0$m","chat","completions","messages","role","content","concat","_toConsumableArray","map","index","max_tokens","choices","message","getAIResponse","_x2","_assessSpeaking","transcript","_response$choices$0$m2","join","assessment","JSON","parse","assessSpeaking","_x3"],"sources":["/Users/bayarmaaorsoo/ZuvuuAI/src/utils/aiService.ts"],"sourcesContent":["import OpenAI from 'openai';\nimport { AssessmentFeedback } from '../types';\n\ntype ChatRole = 'system' | 'user' | 'assistant';\n\nclass AIService {\n  private openai: OpenAI;\n\n  constructor(apiKey: string) {\n    this.openai = new OpenAI({ apiKey });\n  }\n\n  async transcribeAudio(audioUri: string): Promise<string> {\n    try {\n      const audioBlob = await fetch(audioUri).then(r => r.blob());\n      const audioFile = new File([audioBlob], 'audio.wav', { type: 'audio/wav' });\n      \n      const response = await this.openai.audio.transcriptions.create({\n        file: audioFile,\n        model: 'whisper-1'\n      });\n      return response.text;\n    } catch (error) {\n      console.error('Transcription error:', error);\n      throw error;\n    }\n  }\n\n  async getAIResponse(conversation: string[]): Promise<string> {\n    try {\n      const response = await this.openai.chat.completions.create({\n        model: 'gpt-4',\n        messages: [\n          {\n            role: 'system' as ChatRole,\n            content: 'You are a helpful English conversation partner. Keep responses concise and natural, like in a real conversation. Ask follow-up questions to keep the conversation going.'\n          },\n          ...conversation.map((text, index) => ({\n            role: (index % 2 === 0 ? 'user' : 'assistant') as ChatRole,\n            content: text\n          }))\n        ],\n        max_tokens: 100\n      });\n\n      return response.choices[0].message?.content || '';\n    } catch (error) {\n      console.error('AI response error:', error);\n      throw error;\n    }\n  }\n\n  async assessSpeaking(transcript: string[]): Promise<AssessmentFeedback> {\n    try {\n      const response = await this.openai.chat.completions.create({\n        model: 'gpt-4',\n        messages: [\n          {\n            role: 'system' as ChatRole,\n            content: `Analyze the following English conversation transcript and provide scores (1-10) and feedback for:\n            - Fluency: How smoothly and naturally they speak\n            - Grammar: Correctness of language structure\n            - Pronunciation: Based on word choice and sentence structure\n            - Vocabulary: Range and appropriateness of words used\n            Provide the response in JSON format with scores and feedback for each category.`\n          },\n          {\n            role: 'user' as ChatRole,\n            content: transcript.join('\\n')\n          }\n        ]\n      });\n\n      const assessment = JSON.parse(response.choices[0].message?.content || '{}');\n      return assessment as AssessmentFeedback;\n    } catch (error) {\n      console.error('Assessment error:', error);\n      throw error;\n    }\n  }\n}\n\nexport default AIService; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}