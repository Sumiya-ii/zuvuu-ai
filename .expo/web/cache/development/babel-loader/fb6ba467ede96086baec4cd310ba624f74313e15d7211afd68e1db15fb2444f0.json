{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport { Configuration, OpenAIApi } from 'openai';\nvar AIService = function () {\n  function AIService(apiKey) {\n    _classCallCheck(this, AIService);\n    var configuration = new Configuration({\n      apiKey: apiKey\n    });\n    this.openai = new OpenAIApi(configuration);\n  }\n  return _createClass(AIService, [{\n    key: \"transcribeAudio\",\n    value: function () {\n      var _transcribeAudio = _asyncToGenerator(function* (audioUri) {\n        try {\n          var response = yield this.openai.createTranscription(yield fetch(audioUri).then(function (r) {\n            return r.blob();\n          }), 'whisper-1');\n          return response.data.text;\n        } catch (error) {\n          console.error('Transcription error:', error);\n          throw error;\n        }\n      });\n      function transcribeAudio(_x) {\n        return _transcribeAudio.apply(this, arguments);\n      }\n      return transcribeAudio;\n    }()\n  }, {\n    key: \"getAIResponse\",\n    value: function () {\n      var _getAIResponse = _asyncToGenerator(function* (conversation) {\n        try {\n          var _response$data$choice;\n          var response = yield this.openai.createChatCompletion({\n            model: 'gpt-4',\n            messages: [{\n              role: 'system',\n              content: 'You are a helpful English conversation partner. Keep responses concise and natural, like in a real conversation. Ask follow-up questions to keep the conversation going.'\n            }].concat(_toConsumableArray(conversation.map(function (text, index) {\n              return {\n                role: index % 2 === 0 ? 'user' : 'assistant',\n                content: text\n              };\n            }))),\n            max_tokens: 100\n          });\n          return ((_response$data$choice = response.data.choices[0].message) == null ? void 0 : _response$data$choice.content) || '';\n        } catch (error) {\n          console.error('AI response error:', error);\n          throw error;\n        }\n      });\n      function getAIResponse(_x2) {\n        return _getAIResponse.apply(this, arguments);\n      }\n      return getAIResponse;\n    }()\n  }, {\n    key: \"assessSpeaking\",\n    value: function () {\n      var _assessSpeaking = _asyncToGenerator(function* (transcript) {\n        try {\n          var _response$data$choice2;\n          var response = yield this.openai.createChatCompletion({\n            model: 'gpt-4',\n            messages: [{\n              role: 'system',\n              content: `Analyze the following English conversation transcript and provide scores (1-10) and feedback for:\n            - Fluency: How smoothly and naturally they speak\n            - Grammar: Correctness of language structure\n            - Pronunciation: Based on word choice and sentence structure\n            - Vocabulary: Range and appropriateness of words used\n            Provide the response in JSON format with scores and feedback for each category.`\n            }, {\n              role: 'user',\n              content: transcript.join('\\n')\n            }]\n          });\n          var assessment = JSON.parse(((_response$data$choice2 = response.data.choices[0].message) == null ? void 0 : _response$data$choice2.content) || '{}');\n          return assessment;\n        } catch (error) {\n          console.error('Assessment error:', error);\n          throw error;\n        }\n      });\n      function assessSpeaking(_x3) {\n        return _assessSpeaking.apply(this, arguments);\n      }\n      return assessSpeaking;\n    }()\n  }]);\n}();\nexport default AIService;","map":{"version":3,"names":["Configuration","OpenAIApi","AIService","apiKey","_classCallCheck","configuration","openai","_createClass","key","value","_transcribeAudio","_asyncToGenerator","audioUri","response","createTranscription","fetch","then","r","blob","data","text","error","console","transcribeAudio","_x","apply","arguments","_getAIResponse","conversation","_response$data$choice","createChatCompletion","model","messages","role","content","concat","_toConsumableArray","map","index","max_tokens","choices","message","getAIResponse","_x2","_assessSpeaking","transcript","_response$data$choice2","join","assessment","JSON","parse","assessSpeaking","_x3"],"sources":["/Users/bayarmaaorsoo/ZuvuuAI/src/utils/aiService.ts"],"sourcesContent":["import { Configuration, OpenAIApi } from 'openai';\nimport { AssessmentFeedback } from '../types';\n\nclass AIService {\n  private openai: OpenAIApi;\n\n  constructor(apiKey: string) {\n    const configuration = new Configuration({ apiKey });\n    this.openai = new OpenAIApi(configuration);\n  }\n\n  async transcribeAudio(audioUri: string): Promise<string> {\n    try {\n      const response = await this.openai.createTranscription(\n        await fetch(audioUri).then(r => r.blob()),\n        'whisper-1'\n      );\n      return response.data.text;\n    } catch (error) {\n      console.error('Transcription error:', error);\n      throw error;\n    }\n  }\n\n  async getAIResponse(conversation: string[]): Promise<string> {\n    try {\n      const response = await this.openai.createChatCompletion({\n        model: 'gpt-4',\n        messages: [\n          {\n            role: 'system',\n            content: 'You are a helpful English conversation partner. Keep responses concise and natural, like in a real conversation. Ask follow-up questions to keep the conversation going.'\n          },\n          ...conversation.map((text, index) => ({\n            role: index % 2 === 0 ? 'user' : 'assistant',\n            content: text\n          }))\n        ],\n        max_tokens: 100\n      });\n\n      return response.data.choices[0].message?.content || '';\n    } catch (error) {\n      console.error('AI response error:', error);\n      throw error;\n    }\n  }\n\n  async assessSpeaking(transcript: string[]): Promise<AssessmentFeedback> {\n    try {\n      const response = await this.openai.createChatCompletion({\n        model: 'gpt-4',\n        messages: [\n          {\n            role: 'system',\n            content: `Analyze the following English conversation transcript and provide scores (1-10) and feedback for:\n            - Fluency: How smoothly and naturally they speak\n            - Grammar: Correctness of language structure\n            - Pronunciation: Based on word choice and sentence structure\n            - Vocabulary: Range and appropriateness of words used\n            Provide the response in JSON format with scores and feedback for each category.`\n          },\n          {\n            role: 'user',\n            content: transcript.join('\\n')\n          }\n        ]\n      });\n\n      const assessment = JSON.parse(response.data.choices[0].message?.content || '{}');\n      return assessment as AssessmentFeedback;\n    } catch (error) {\n      console.error('Assessment error:', error);\n      throw error;\n    }\n  }\n}\n\nexport default AIService; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}